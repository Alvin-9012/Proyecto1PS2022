/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyecto2ipc1.Swing.Damas;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;

/**
 *
 * @author alvin
 */
public class Cronometro extends javax.swing.JFrame {

    /**
     * Creates new form Cronometro
     */
    
    private Timer tiempo;
    private int centesimas_segundos = 0;
    private int segundos = 0;
    private int minutos = 0;
    
    public Cronometro() {
        initComponents();
        this.setTitle("Cronometro");        
        tiempo = new Timer(10, acciones);
        this.setVisible(true);
    }
    
    public void Iniciar(){
        tiempo.start();
    }
    
    public void cerrarCronometro(){
        this.dispose();
    }
    
    public Cronometro(int minutos, int segundos) {
        initComponents(); 
        this.setTitle("Cronometro");        
        tiempo = new Timer(10, acciones);
        this.minutos = minutos;
        this.segundos = segundos;
        this.setVisible(true);
    }
    
    public void stop(){
        tiempo.stop();
    }
    
    public int getMinutos(){
        return this.minutos;
    }
    
    public int getSegundos(){
        return this.segundos;
    }
    
 private void actualizarEtiquetaTiempo(){
        String texto = (minutos<=9?"0":"")+minutos+":"+(segundos <= 9?"0":"")+segundos;
        jTextTime.setText(texto);
    }
 private ActionListener acciones = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            centesimas_segundos ++;
            if(centesimas_segundos == 100){
                segundos++;
                centesimas_segundos = 0;
            }
            if(segundos == 60){
                minutos ++;
                segundos = 0;
            } 
            actualizarEtiquetaTiempo();
        }
    };
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextTime = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jTextTime.setEditable(false);
        jTextTime.setFont(new java.awt.Font("Abyssinica SIL", 3, 36)); // NOI18N
        jTextTime.setText("00:00");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextTime, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextTime, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jTextTime;
    // End of variables declaration//GEN-END:variables
}
